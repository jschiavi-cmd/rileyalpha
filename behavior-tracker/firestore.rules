rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isAchievementTeam() {
      return isAuthenticated() && getUserRole() == 'achievement_team';
    }
    
    function isTeacher() {
      return isAuthenticated() && (getUserRole() == 'teacher' || getUserRole() == 'specials_teacher');
    }
    
    function isParent() {
      return isAuthenticated() && getUserRole() == 'parent';
    }
    
    function hasAccessToStudent(studentId) {
      let student = get(/databases/$(database)/documents/students/$(studentId)).data;
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      
      return isAdmin() || 
             isAchievementTeam() || 
             student.primaryTeacher == userProfile.name ||
             student.switchTeacher == userProfile.name ||
             (isParent() && request.auth.token.email in student.parentEmails);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin();
    }
    
    // Students collection
    match /students/{studentId} {
      allow read: if hasAccessToStudent(studentId);
      allow create: if isAdmin() || isAchievementTeam();
      allow update: if isAdmin() || isAchievementTeam();
      allow delete: if isAdmin();
    }
    
    // Scores collection
    match /scores/{scoreId} {
      allow read: if hasAccessToStudent(resource.data.studentId);
      allow create, update: if isTeacher() && hasAccessToStudent(request.resource.data.studentId);
      allow delete: if isAdmin();
    }
    
    // Accommodations log
    match /accommodations_log/{logId} {
      allow read: if hasAccessToStudent(resource.data.studentId);
      allow create, update: if isTeacher() && hasAccessToStudent(request.resource.data.studentId);
      allow delete: if isAdmin();
    }
    
    // Behavior incidents
    match /behavior_incidents/{incidentId} {
      allow read: if hasAccessToStudent(resource.data.studentId);
      allow create: if isTeacher() && hasAccessToStudent(request.resource.data.studentId);
      allow delete: if isAdmin();
    }
    
    // Comments
    match /comments/{commentId} {
      allow read: if hasAccessToStudent(resource.data.studentId);
      allow create, update: if isTeacher() && hasAccessToStudent(request.resource.data.studentId);
      allow delete: if isAdmin();
    }
    
    // Audit logs - admin only
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // Anyone can create audit logs
      allow update, delete: if false; // Never allow modification
    }
    
    // Specials schedule
    match /specials_schedule/{scheduleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // School config
    match /school_config/{schoolId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}